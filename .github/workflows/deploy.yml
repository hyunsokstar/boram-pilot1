name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Lint check
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run tests (if available)
        run: npm test --if-present

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        env:
          BACKEND_URL: ${{ secrets.BACKEND_URL || 'http://43.200.234.52:8080' }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 300s
          envs: BACKEND_URL
          script: |
            set -e

            echo "üöÄ Starting deployment..."

            # Node.js ÌôïÏù∏ Î∞è ÏÑ§Ïπò
            if ! command -v node >/dev/null 2>&1; then
              echo "üì• Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "‚úÖ Node.js: $(node --version)"
            fi

            # PM2 ÌôïÏù∏ Î∞è ÏÑ§Ïπò
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "üì• Installing PM2..."
              sudo npm install -g pm2
            else
              echo "‚úÖ PM2: $(pm2 -v)"
            fi

            PROJECT_PATH="${PROJECT_PATH:-/home/ubuntu/boram-pilot1}"
            cd "$PROJECT_PATH"

            # EACCES Î∞©ÏßÄÎ•º ÏúÑÌï¥ ÏÜåÏú†Í∂å Ï†ïÎ¶¨ (Í≥ºÍ±∞ sudoÎ°ú ÏÉùÏÑ±Îêú ÌååÏùº Ï†ïÎ¶¨)
            echo "üîê Fixing ownership..."
            sudo chown -R $USER:$USER .

            echo "üì• Pulling latest changes..."
            git fetch --all --prune
            git reset --hard origin/main
            git clean -fd

            echo "üì¶ Installing dependencies (including dev for build)..."
            rm -rf node_modules
            npm ci --no-audit --no-fund
            
            # TailwindCSS Í¥ÄÎ†® Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò (ÌïÑÏöîÌïú Í≤ΩÏö∞)
            npm i -D @tailwindcss/postcss tailwindcss postcss autoprefixer || true

            echo "üî® Building application (production)..."
            # ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï
            export BACKEND_URL="${BACKEND_URL:-http://43.200.234.52:8080}"
            export NODE_ENV=production
            echo "Using BACKEND_URL=$BACKEND_URL"
            echo "Using NODE_ENV=$NODE_ENV"
            npm run build

            # ÏÑ†ÌÉù: Îü∞ÌÉÄÏûÑ ÏµúÏ†ÅÌôîÎ•º ÏúÑÌï¥ devDependencies Ï†úÍ±∞ (ÎπåÎìú ÌõÑ)
            echo "üßπ Pruning devDependencies (optional)..."
            npm prune --omit=dev || true

            echo "üîÑ Restarting application via PM2..."
            # ÎπåÎìú ÏÇ∞Ï∂úÎ¨º ÌôïÏù∏
            if [ ! -d .next ]; then
              echo "‚ùå .next directory not found; build may have failed."
              exit 1
            fi

            # ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±
            echo "BACKEND_URL=${BACKEND_URL:-http://43.200.234.52:8080}" > .env.production
            echo "NODE_ENV=production" >> .env.production

            # ÏµúÏã† ÏÑ§Ï†ï Ï†ÅÏö©ÏùÑ ÏúÑÌï¥ Ïû¨ÏÉùÏÑ±
            pm2 delete boram-pilot1 || true
            pm2 start ecosystem.config.js
            pm2 save

            echo "üè• Health check..."
            HEALTH_URL="http://localhost:3000/api/health"
            for i in $(seq 1 30); do
              if curl -sf "$HEALTH_URL" >/dev/null; then
                echo "‚úÖ Health check OK"
                curl -s "$HEALTH_URL" || true
                break
              fi
              echo "‚è≥ Waiting for app... ($i/30)"
              sleep 3
            done
            curl -sf "$HEALTH_URL" || echo "Health check failed"

            echo "üéâ Deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment succeeded!"
          else
            echo "‚ùå Deployment failed!"
          fi
